@use "/src/styles/variables" as *;
@use "/src/styles/mixins" as *;
@use "sass:math";
@use "sass:color"; 

@mixin can-toggle-branding(
    $can-toggle-off-color: #777,
    $can-toggle-on-color: $tertiary-color,
    $can-toggle-inactive-text: rgba(white, 0.5),
    $can-toggle-transition: cubic-bezier(0, 1, 0.5, 1)
) {
    input[type="checkbox"] {
        &[disabled] ~ label {
            color: rgba($can-toggle-off-color, 0.5);
        }

        &:focus ~ label,
        &:hover ~ label {
            .canToggleSwitch {
                background-color: $can-toggle-off-color;
                &:after {
                    color: color.scale($can-toggle-off-color, $lightness: 10%);
                }
            }
        }
        &:hover ~ label {
            color: color.scale($can-toggle-off-color, $lightness: 5%);
        }
        &:checked {
            ~ label {
                &:hover {
                    color: color.scale($can-toggle-on-color, $lightness: 3%);
                }

                .canToggleSwitch {
                    background-color: color.adjust($can-toggle-on-color, $lightness: 5%);
                    &:after {
                        color: color.scale($can-toggle-on-color, $lightness: -5%);
                    }
                }
            }

            &:focus,
            &:hover {
                ~ label {
                    .canToggleSwitch {
                        background-color: $can-toggle-on-color;
                        &:after {
                            color: color.scale($can-toggle-on-color, $lightness: 10%);
                        }
                    }
                }
            }
        }
    }

    label {
        .can-toggle__label-text {
            flex: 1;
        }

        .canToggleSwitch {
            transition: background-color 0.3s $can-toggle-transition;
            background: color.scale($can-toggle-off-color, $lightness: 5%);
            &:before {
                color: $can-toggle-inactive-text;
            }
            &:after {
                // Autoprefixer choked here, so making the prefixes explicit
                -webkit-transition: -webkit-transform 0.3s $can-toggle-transition;
                transition: transform 0.3s $can-toggle-transition;
                color: $can-toggle-off-color;
            }
        }
    }
}

@mixin can-toggle-appearance(
    $can-toggle-width: 134px,
    $can-toggle-height: 36px,
    $can-toggle-border-radius: 4px,
    $can-toggle-offset: 2px,
    $can-toggle-label-font-size: 14px,
    $can-toggle-switch-font-size: 12px,
    $can-toggle-shadow: 0 3px 3px rgba(black, 0.4)
) {
    $can-toggle-switch-width: calc($can-toggle-width/2);
    $can-toggle-translate3d: calc(0% + $can-toggle-offset);

    input[type="checkbox"] {
        &:focus ~ label,
        &:hover ~ label {
            .canToggleSwitch {
                &:after {
                    box-shadow: $can-toggle-shadow;
                }
            }
        }

        &:checked {
            ~ label {
                .canToggleSwitch {
                    &:after {
                        transform: translate3d(calc($can-toggle-width - $can-toggle-translate3d), 0, 0);
                    }
                }
            }
            &:focus,
            &:hover {
                ~ label {
                    .canToggleSwitch {
                        &:after {
                            box-shadow: $can-toggle-shadow;
                        }
                    }
                }
            }
        }
    }

    label {
        font-size: $can-toggle-label-font-size;

        .canToggleSwitch {
            height: $can-toggle-height;
            flex: 0 0 $can-toggle-width;
            border-radius: $can-toggle-border-radius;

            &:before {
                left: math.div($can-toggle-width, 2);
                font-size: $can-toggle-switch-font-size;
                line-height: $can-toggle-height;
                width: math.div($can-toggle-width, 2);
                padding: 0 12px;
            }

            &:after {
                top: $can-toggle-offset;
                left: $can-toggle-offset;
                border-radius: math.div($can-toggle-border-radius, 2);
                width: calc($can-toggle-switch-width - $can-toggle-offset);
                line-height: $can-toggle-height - ($can-toggle-offset * 2);
                font-size: $can-toggle-switch-font-size;
            }

            &:hover {
                &:after {
                    box-shadow: $can-toggle-shadow;
                }
            }
        }
    }
}

.canToggle {
    position: relative;
    *,
    *:before,
    *:after {
        box-sizing: border-box;
    }
    //overflow: hidden;

    input[type="checkbox"] {
        opacity: 0;
        position: absolute;
        top: 0;
        left: 0;

        &[disabled] ~ label {
            pointer-events: none;
            .canToggleSwitch {
                opacity: 0.4;
            }
        }

        &:checked {
            ~ label {
                .canToggleSwitch {
                    &:before {
                        content: attr(data-unchecked);
                        left: 0;
                    }

                    &:after {
                        content: attr(data-checked);
                    }
                }
            }
        }
    }

    label {
        user-select: none;
        position: relative;
        display: flex;
        align-items: center;

        .can-toggle__label-text {
            flex: 1;
            padding-left: 32px;
        }

        .canToggleSwitch {
            position: relative;

            &:before {
                content: attr(data-checked);
                position: absolute;
                top: 0;
                text-transform: uppercase;
                text-align: center;
            }

            &:after {
                content: attr(data-unchecked);
                position: absolute;
                // z-index: 1;
                text-transform: uppercase;
                text-align: center;
                background: white;
                transform: translate3d(0, 0, 0);
            }
        }
    }

    @include can-toggle-branding;
    &.canToggleSizeLarge {
        @include can-toggle-appearance(
            100%,
            // Toggle width
            50px,
            // Toggle height
            4px,
            // Toggle border radius
            2px,
            // Offset (distance btw switch and box)
            14px,
            // Label font size
            14px,
            // Switch font size
            0 4px 4px rgba(black, 0.4) // Switch shadow on hover/focus
        );
    }
}
